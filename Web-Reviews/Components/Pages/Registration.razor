@using System.Net
@using Entities.Models
@using Web_Reviews.Services.Contracts
@inject ICookieService<TokenDTO, string> CookieService
@inject IJSRuntime JsRuntime 
@inject IHttpClientFactory ClientFactory 
@inject NavigationManager Navigation
@rendermode RenderMode.InteractiveServer

@page "/registration"
<PageTitle>Registration</PageTitle>

<div class="card-body d-flex flex-column align-items-center">
    
    <EditForm class="text-center" Model="@_userForRegistrationDto" OnSubmit="@Register" FormName="registrationForm">
        
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label>Имя пользователя<b style="color: red">*</b></label>
            <InputText type="text" class="form-control" @bind-Value="_userForRegistrationDto.Nickname" style="@StyleNickName" placeholder="Никнейм"/>
            <ValidationMessage For="@(() => _userForRegistrationDto.Nickname)"/>
            <div style="color: red">
                @errorNickName
            </div>
        </div>

        <div class="mb-3">
            <label>Почта<b style="color: red">*</b></label>
            <InputText type="text" class="form-control" @bind-Value="_userForRegistrationDto.Email" style="@StyleEmail" placeholder="Email"/>
            <ValidationMessage For="@(() => _userForRegistrationDto.Email)"/>
            <div style="color: red">
                @errorEmail
            </div>
        </div>
        
        <div class="mb-3">
            <label>Пароль<b style="color: red">*</b></label>
            <InputText type="password" class="form-control" @bind-Value="_userForRegistrationDto.Password" style="@StylePassword" placeholder="Пароль"/>
                <ValidationMessage For="@(() => _userForRegistrationDto.Password)"/>
        </div>

        <div class="mb-3">
            <label>Подтвердите пароль<b style="color: red">*</b></label>
            <input type="password" class="form-control" @bind-value="SecondPassword" style="@StylePassword" placeholder="Подтвердите пароль"/>
        </div>

        <div class="mb-3">
            <label><b style="color: red">*</b> - обязательные для заполнения поля</label>
        </div>
        
        <div class="mb-3">
            <button type="submit" class="btn btn-outline-primary d-block w-100">Создать аккаунт</button>
        </div>
        
    </EditForm>
</div>

@code {

    [Parameter] 
    public static string StylePassword { get; set; }

    [Parameter]
    public static string StyleNickName { get; set; }
    
    [Parameter]
    public static string StyleEmail { get; set; }
    
    TokenDTO _tokenDto;
    
    const string ErrorStyle = "border-color: red";
    
    const string DefaultStyle = "";
    
    UserForRegistrationDTO _userForRegistrationDto = new();
    
    string SecondPassword {get; set;}

    string _accessToken;

    static string errorNickName;
    static string errorEmail;
    
    async Task Register()
    {
        if (_userForRegistrationDto.Password != SecondPassword)
        {
            StylePassword = ErrorStyle;
            return;
        }
        
        StylePassword = DefaultStyle;
        
        var httpClient = ClientFactory.CreateClient();
        try
        {
            const string defaultRank = "дефолт";
            
            var responseRanks = await httpClient.GetAsync("https://localhost:7062/api/userranks");
            var r = await responseRanks.Content.ReadAsStringAsync();
            
            //костыль
            var sbR = new StringBuilder(r);
            sbR.Replace("title", "Title");
            sbR.Replace("id", "UserRankId");
            
            var userRanks = JsonSerializer.Deserialize<List<Userrank>>(sbR.ToString()) ?? new List<Userrank>();
            
            _userForRegistrationDto.UserRankId = userRanks.Where(x => x.Title == defaultRank).Select(x => x.UserRankId).FirstOrDefault();
            
            var response = await httpClient.PostAsJsonAsync("https://localhost:7062/api/authentication/registration", _userForRegistrationDto);

            if (response.StatusCode == HttpStatusCode.Created)
            {
                errorEmail = "";
                errorNickName = "";
                var userForAuth = new UserForAuthenticationDTO()
                {
                    UserPersonalData = _userForRegistrationDto.Nickname,
                    Password = _userForRegistrationDto.Password
                };
                var responseForAuth = await httpClient.PostAsJsonAsync("https://localhost:7062/api/authentication/login", userForAuth);

                var result = await responseForAuth.Content.ReadAsStringAsync();
                
                //костыль
                var sbResult = new StringBuilder(result);
                sbResult.Replace("accessToken", CookieKeys.AccessTokenKey);
                sbResult.Replace("refreshToken", "RefreshToken");
                
                _tokenDto = JsonSerializer.Deserialize<TokenDTO>(sbResult.ToString()) ?? new TokenDTO("", "");
                
                await CookieService.AppendCookieAsync(_tokenDto);
                _accessToken = await CookieService.Get(CookieKeys.AccessTokenKey);
                Navigation.NavigateTo("profile");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                var errorRegistration = JsonSerializer.Deserialize<ErrorRegistration>(errorMessage) ?? new ErrorRegistration( "");
                if (errorRegistration.message.Contains("email"))
                {
                    errorEmail = errorRegistration.message;
                    errorNickName = "";
                }
                else
                {
                    errorNickName = errorRegistration.message;
                    errorEmail = "";
                }
            }
        }
        catch(Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("alert", ex.Message);
        }
    }

    record ErrorRegistration(string message);

}