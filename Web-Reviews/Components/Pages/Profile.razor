@using System.Net
@using Microsoft.IdentityModel.Tokens
@inject IHttpClientFactory ClientFactory 
@inject IJSRuntime JsRuntime 
@inject NavigationManager NavigationManager
@inject Connections Connection
@inject ProtectedLocalStorage Storage
@rendermode InteractiveServer

@page "/profile"
<PageTitle>Profile</PageTitle>


<img src="data:image/png;base64, @_photo" alt=""/>
<p bind="@_userDto?.Email"/>
<p bind="@_userDto?.Nickname"/>
    


@code {
    
    UserDTO _userDto;

    string _photo = "";
    
    string accessToken { get; set; }

    bool _isUserAuth;

    // protected override async Task OnInitializedAsync()
    // {
    //     _isUserAuth = await CheckAuth();
    //
    //     if (!_isUserAuth)
    //     {
    //         return;
    //     }
    //     
    //     await GetUserByToken();
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)return;
        _isUserAuth = await CheckAuth();

        if (!_isUserAuth)
        {
            await JsRuntime.InvokeAsync<string>("alert", "Вы не авторизованы!");
            NavigationManager.NavigateTo("/login");
            return;
        }
        
        await GetUserByToken();
    }

    async Task<bool> CheckAuth()
    {
        using var httpClient = ClientFactory.CreateClient();
        try
        {
            var request = await httpClient.GetAsync($"{Connection.selfConnection}/token");
            var storageResult = await Storage.GetAsync<string>(CookieKeys.AccessTokenKey);
            
            if (storageResult.Value.IsNullOrEmpty())
                return false;
            accessToken = storageResult.Value;
            
            return true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        return false;
    }

    async Task GetUserByToken()
    {
        using var httpClient = ClientFactory.CreateClient();

        var requestUser = await httpClient.GetAsync($"{Connection.ApiConnection}/api/tokens/decode?accessToken={accessToken}");
        var content = await requestUser.Content.ReadAsStringAsync();
        
        //костыль
        var sb = new StringBuilder(content);
        sb.Replace("userId", nameof(_userDto.UserId));
        sb.Replace("nickname", nameof(_userDto.Nickname));
        sb.Replace("email", nameof(_userDto.Email));
        sb.Replace("userRankId", nameof(_userDto.UserRankId));
        sb.Replace("photo", nameof(_userDto.Photo));
        
        _userDto = JsonSerializer.Deserialize<UserDTO>(sb.ToString()) ?? new UserDTO();
        if (_userDto.Photo != null)
            _photo = Convert.ToBase64String(_userDto.Photo);
        var requestRank = await httpClient.GetAsync($"{Connection.ApiConnection}/api/userranks/{_userDto.UserRankId}");
    }
   
}