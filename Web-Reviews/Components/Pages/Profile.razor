@using System.Net
@using System.IdentityModel.Tokens.Jwt
@inject IHttpClientFactory ClientFactory 
@inject IJSRuntime JsRuntime 
@inject NavigationManager NavigationManager

@page "/profile"
<PageTitle>Profile</PageTitle>

<img src="data:image/png;base64, @photo" alt="Изображение не обнаружено :("/>
<p>@_userDto?.Email</p>
<p>@_userDto?.Nickname</p>

@code {
    
    
    UserDTO _userDto;

    string photo = "";
    
    string accessToken { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var isUserAuth = await CheckAuth();

        if (!isUserAuth)
            return;
        
        await GetUserByToken();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeAsync<string>("alert", "Вы не авторизованы!");
        NavigationManager.NavigateTo("https://localhost:7224/login");
    }
    
    async Task<bool> CheckAuth()
    {
        using var httpClient = ClientFactory.CreateClient();
        try
        {
            var request = await httpClient.GetAsync("https://localhost:7224/token");
            
            if (request.StatusCode != HttpStatusCode.OK)
                return false;

            var content = await request.Content.ReadAsStringAsync();
            accessToken = JsonSerializer.Deserialize<string>(content) ?? "";
            
            return true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        return false;
    }

    async Task GetUserByToken()
    {
        using var httpClient = ClientFactory.CreateClient();

        var tokenDTO = new TokenDTO(accessToken, "");
        var requestUser = await httpClient.PostAsJsonAsync("https://localhost:7062/api/authentication",tokenDTO);
        var content = await requestUser.Content.ReadAsStringAsync();
        
        //костыль
        var sb = new StringBuilder(content);
        sb.Replace("userId", nameof(_userDto.UserId));
        sb.Replace("nickname", nameof(_userDto.Nickname));
        sb.Replace("email", nameof(_userDto.Email));
        sb.Replace("userRankId", nameof(_userDto.UserRankId));
        sb.Replace("photo", nameof(_userDto.Photo));
        
        _userDto = JsonSerializer.Deserialize<UserDTO>(sb.ToString()) ?? new UserDTO();
        if (_userDto.Photo != null)
            photo = Convert.ToBase64String(_userDto.Photo);
    }
   
}